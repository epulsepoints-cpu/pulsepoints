{
  "name": "e-pulsepoints",
  "private": false,
  "version": "1.0.0",
  "description": "A gamified ECG learning app to master electrocardiogram interpretation with daily challenges, achievements, and progress tracking.",
  "author": "E-Pulsepoints Team <support@e-pulsepoints.com>",
  "homepage": "https://e-pulsepoints.com",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/filmmaking90/ecg-learn-game-main.git"
  },
  "keywords": [
    "ecg",
    "medical",
    "education",
    "learning",
    "cardiology",
    "healthcare",
    "training"
  ],
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "build:prod": "vite build --mode production",
    "build:android": "npm run build:prod && npx cap sync android && npx cap build android",
    "build:android:release": "npm run build:prod && npx cap sync android && cd android && ./gradlew clean && ./gradlew assembleRelease",
    "build:android:debug": "npm run build:dev && npx cap sync android && cd android && ./gradlew assembleDebug",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "preview": "vite preview",
    "type-check": "tsc --noEmit",
    "clean:android": "npx cap sync android && cd android && ./gradlew clean",
    "verify:firebase": "node scripts/verify-firebase-config.cjs",
    "download-ecg": "node scripts/download-ecg-data.js",
    "download-ecg-simple": "node scripts/download-ecg-simple.js",
    "setup-ecg": "node scripts/setup-ecg-database.js",
    "reset:android": "npx rimraf android && npx cap add android && npx cap sync android",
    "fix:android": "npx cap sync android && cd android && ./gradlew clean && ./gradlew build",
    "check:android": "npx cap doctor android",
    "prepare:android": "npx cap add android && npx cap sync android",
    "android:dev": "npm run build:dev && npx cap sync android && npx cap run android",
    "android:open": "npx cap open android",
    "android:studio": "npm run build:prod && npx cap sync android && npx cap open android",
    "android:build:studio": "npm run build:prod && npx cap sync android && echo 'Ready for Android Studio build'",
    "android:reset:full": "npx rimraf android && npm run build:prod && npx cap add android && npx cap sync android",
    "android:sync:force": "npm run build:prod && npx cap sync android --force",
    "android:clean:reset": "npx cap sync android && cd android && ./gradlew clean && cd .. && npx cap sync android",
    "android:restore": "git checkout -- android/ && npm run android:sync:force",
    "upload-lessons": "node scripts/uploadLessonsToFirestore.cjs",
    "upload-lessons:dry-run": "node scripts/uploadLessonsToFirestore.cjs --dry-run",
    "upload-lessons-tsx": "tsx scripts/uploadLessonsDynamic.ts",
    "upload-lessons-tsx:dry-run": "tsx scripts/uploadLessonsDynamic.ts --dry-run",
    "upload-lessons-filtered": "node scripts/uploadLessonsFiltered.cjs",
    "upload-lessons-filtered:dry-run": "node scripts/uploadLessonsFiltered.cjs --dry-run",
    "upload-images": "node scripts/uploadImagesToFirebase.cjs",
    "upload-images:dry-run": "node scripts/uploadImagesToFirebase.cjs --dry-run",
    "upload-images:production": "node scripts/uploadImagesToFirebaseProduction.cjs",
    "upload-images:production:dry-run": "node scripts/uploadImagesToFirebaseProduction.cjs --dry-run",
    "check-firebase-storage": "node scripts/checkFirebaseStorage.cjs",
    "test-lessons": "node scripts/testLessonService.cjs",
    "create-admin": "node scripts/createAdminUser.cjs",
    "test-lesson-auth": "node scripts/testGoogleAuthUpload.cjs",
    "cleanup-scripts": "node scripts/cleanupLessonScripts.cjs",
    "cleanup-duplicate-js": "node scripts/cleanupDuplicateLessonJS.cjs",
    "analyze-unused-lessons": "node scripts/analyzeAndBackupUnusedLessons.cjs",
    "final-lesson-cleanup": "node scripts/finalLessonCleanup.cjs",
    "android:debug": "npm run build:dev && npx cap sync android && npx cap run android --live-reload",
    "android:logs": "adb logcat | grep -i capacitor",
    "android:inspect": "cd android && ./gradlew assembleDebug --stacktrace --info",
    "android:test:device": "npm run build:prod && npx cap sync android && cd android && ./gradlew installDebug",
    "android:crashfix": "npm run clean:android && npm run build:prod && npx cap sync android --force",
    "android:logcat": "adb logcat *:E",
    "android:clear:logs": "adb logcat -c && adb logcat | grep -E '(E-Pulsepoints|PulsePoints|Capacitor|WebView)'",
    "studio:prepare": "npm run build:prod && npx cap sync android && echo 'Opening Android Studio...' && npx cap open android",
    "studio:clean": "cd android && ./gradlew clean && echo 'Android project cleaned'",
    "studio:build:debug": "cd android && ./gradlew assembleDebug",
    "studio:build:release": "cd android && ./gradlew assembleRelease",
    "studio:install": "cd android && ./gradlew installDebug",
    "studio:bundle": "cd android && ./gradlew bundleRelease",
    "firebase:check": "node scripts/check-firebase-config.cjs",
    "firebase:verify": "cd android/app && dir google-services.json 2>nul || echo google-services.json NOT FOUND!",
    "firebase:debug": "cd android && ./gradlew :app:dependencies | findstr firebase",
    "firebase:fix": "npm run firebase:setup && npm run studio:clean && npm run build:prod && npx cap sync android",
    "firebase:locate": "dir /s google-services.json 2>nul || echo No google-services.json found in project",
    "firebase:check-all": "echo Checking Firebase files... && npm run firebase:verify && npm run firebase:locate && echo Checking build.gradle files... && dir android\\app\\build.gradle android\\build.gradle 2>nul || echo Build files not found",
    "firebase:windows-check": "if exist android\\app\\google-services.json (echo google-services.json FOUND) else (echo google-services.json MISSING - Download from Firebase Console)",
    "firebase:gradle-setup": "echo Setting up Firebase Gradle configuration... && npm run firebase:setup-root-gradle && npm run firebase:setup-app-gradle",
    "firebase:setup-root-gradle": "echo Checking root build.gradle for Google services plugin...",
    "firebase:setup-app-gradle": "echo Checking app build.gradle for Google services plugin...",
    "firebase:verify-gradle": "cd android && findstr /C:\"google-services\" build.gradle app\\build.gradle 2>nul || echo Firebase plugins not found in Gradle files",
    "firebase:complete-setup": "npm run firebase:windows-check && npm run firebase:gradle-setup && npm run studio:clean && npm run build:prod && npx cap sync android",
    "firebase:test-build": "echo Testing Firebase configuration... && npm run build:prod && npx cap sync android && cd android && ./gradlew :app:dependencies --configuration releaseRuntimeClasspath | findstr firebase",
    "firebase:final-check": "npm run firebase:windows-check && npm run firebase:verify-gradle && npm run firebase:test-build",
    "firebase:build-and-test": "npm run firebase:final-check && echo Building debug APK to test Firebase... && npm run studio:build:debug",
    "import-tasks": "node scripts/bulk-import.cjs",
    "import-youtube": "node scripts/bulk-import.cjs youtube-tasks.json",
    "test:notifications": "node scripts/run-notification-script.cjs sendTestNotificationToAllUsers.ts",
    "fix:notifications": "node scripts/run-notification-script.cjs debug-notifications.ts",
    "send:notifications": "node scripts/run-notification-script.cjs send-notifications.ts",
    "send:reminder": "node scripts/run-notification-script.cjs quick-send-notification.ts reminder",
    "send:welcome": "node scripts/run-notification-script.cjs quick-send-notification.ts welcome",
    "send:achievement": "node scripts/run-notification-script.cjs quick-send-notification.ts achievement",
    "send:announcement": "node scripts/run-notification-script.cjs quick-send-notification.ts announcement",
    "quick:test": "node scripts/run-ts-script.mjs ./scripts/quick-test-notification.ts test",
    "quick:welcome": "node scripts/run-ts-script.mjs ./scripts/quick-test-notification.ts welcome",
    "quick:reminder": "node scripts/run-ts-script.mjs ./scripts/quick-test-notification.ts reminder",
    "quick:achievement": "node scripts/run-ts-script.mjs ./scripts/quick-test-notification.ts achievement",
    "quick:announcement": "node scripts/run-ts-script.mjs ./scripts/quick-test-notification.ts announcement",
    "simple:test": "node scripts/send-simple-notification.cjs test",
    "register:token": "node scripts/register-test-token.cjs",
    "fix:functions": "node scripts/fix-ts-functions.cjs",
    "deploy:functions": "cd functions && npm run build && firebase deploy --only functions",
    "serve:functions": "cd functions && npm run serve",
    "send:notifications:fixed": "node scripts/run-ts-script.mjs ./scripts/send-notifications-fixed.ts",
    "force:deploy:functions": "node scripts/force-deploy-functions.cjs",
    "notify:quick": "node scripts/send-quick-notification.cjs",
    "notify:all": "node scripts/send-all-notifications.cjs",
    "notify:simple": "node scripts/simple-notify-all.cjs",
    "notify:test": "node scripts/fixed-notification-test.cjs",
    "firebase:setup": "node scripts/setup-firebase-key.cjs",
    "build:functions": "cd functions && npm run build",
    "test:functions": "node scripts/test-functions.cjs",
    "firebase:test": "npm run dev & sleep 5 && echo \"Open browser and run testFirebase() in console\"",
    "firebase:deploy-rules": "firebase deploy --only firestore:rules",
    "firebase:backup-rules": "firebase firestore:rules > firestore.rules.backup",
    "firebase:diagnose": "npm run build && echo \"Check build output for Firebase errors\""
  },
  "dependencies": {
    "@capacitor-community/sqlite": "^7.0.1",
    "@capacitor-firebase/authentication": "^7.3.0",
    "@capacitor/android": "^7.4.1",
    "@capacitor/app": "^7.0.2",
    "@capacitor/cli": "^7.4.1",
    "@capacitor/core": "^7.4.1",
    "@capacitor/local-notifications": "^7.0.2",
    "@capacitor/push-notifications": "^7.0.1",
    "@hookform/resolvers": "^3.9.0",
    "@lottiefiles/react-lottie-player": "^3.6.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@revenuecat/purchases-capacitor": "^11.1.1",
    "@supabase/supabase-js": "^2.49.4",
    "@tanstack/react-query": "^5.81.5",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/uuid": "^10.0.0",
    "@types/video.js": "^7.3.58",
    "axios": "^1.12.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dotenv": "^17.2.2",
    "embla-carousel-react": "^8.3.0",
    "firebase": "^11.10.0",
    "firebase-admin": "^13.4.0",
    "framer-motion": "^12.23.0",
    "h5p-standalone": "^3.8.0",
    "highlight.js": "^11.9.0",
    "html2canvas": "^1.4.1",
    "input-otp": "^1.2.4",
    "jspdf": "^3.0.1",
    "lottie-react": "^2.4.1",
    "lucide-react": "^0.462.0",
    "marked": "^12.0.1",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-beautiful-dnd": "^13.1.1",
    "react-confetti": "^6.4.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-icons": "^5.5.0",
    "react-joyride": "^2.9.3",
    "react-player": "^3.3.1",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "react-youtube": "^10.1.0",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwind-scrollbar-hide": "^4.0.0",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "vaul": "^0.9.3",
    "video.js": "^8.23.4",
    "videojs-youtube": "^3.0.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.17.0",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18.3.7",
    "@types/youtube": "^0.1.2",
    "@vercel/node": "^5.4.0",
    "@vitejs/plugin-react": "^5.0.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.5.6",
    "rimraf": "^3.0.2",
    "tailwindcss": "^3.4.17",
    "ts-node": "^10.9.2",
    "tsx": "^4.20.5",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^7.1.8"
  },
  "main": "debug-onboarding.js",
  "directories": {
    "doc": "docs"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/filmmaking90/ecg-learn-game-main/issues"
  }
}
